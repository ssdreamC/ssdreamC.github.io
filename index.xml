<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ssdreamC·凉月</title>
    <link>https://ssdreamc.github.io/</link>
    <description>Recent content on ssdreamC·凉月</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 19 Aug 2022 11:14:12 +0800</lastBuildDate><atom:link href="https://ssdreamc.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第一篇测试稿</title>
      <link>https://ssdreamc.github.io/posts/my-first-post/</link>
      <pubDate>Fri, 19 Aug 2022 11:14:12 +0800</pubDate>
      
      <guid>https://ssdreamc.github.io/posts/my-first-post/</guid>
      <description>这是第一篇测试文章，hogo支持markdown就很开心；
当我准备差不多了我就搞个 gitee 的 page……
记录 Link to heading 2022-08-22 10:35:13
先试用hogo-code的主题
git submodule add https://github.com/luizdepra/hugo-coder.git themes/hugo-coder 发现：
设置可以写在主题的config.toml中，也可以写在主目录的config.toml中 图片等资源默认应该放入主目录下的static中 2022-08-22 11:01:27
标签和分类
[taxonomies] tag = &amp;#34;tags&amp;#34; category = &amp;#34;categories&amp;#34; --- title: &amp;#34;第一篇测试稿&amp;#34; date: 2022-08-19T11:14:12+08:00 tags: [&amp;#34;记录&amp;#34;, &amp;#34;hugo&amp;#34;] categories: [&amp;#34;记录&amp;#34;] --- 2022-08-22 18:25:03
hugo 的目录说明：
archetypes，原型或者说模板，hugo new 的时候使用的 assets，资产，默认不创建 config，设置，默认不会创建而是只有一个config.toml Hugo ships with a large number of configuration directives. The config directory is where those directives are stored as JSON, YAML, or TOML files.</description>
    </item>
    
    <item>
      <title>基于国产机锐捷工作站与UOS系统的开发环境配置</title>
      <link>https://ssdreamc.github.io/posts/%E5%9F%BA%E4%BA%8E%E5%9B%BD%E4%BA%A7%E6%9C%BA%E9%94%90%E6%8D%B7%E5%B7%A5%E4%BD%9C%E7%AB%99%E4%B8%8Euos%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 18 Aug 2022 23:26:12 +0800</pubDate>
      
      <guid>https://ssdreamc.github.io/posts/%E5%9F%BA%E4%BA%8E%E5%9B%BD%E4%BA%A7%E6%9C%BA%E9%94%90%E6%8D%B7%E5%B7%A5%E4%BD%9C%E7%AB%99%E4%B8%8Euos%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>适用 USO 1.0根系统（deepin v23）发布前版本
0. 正常使用建议 Link to heading 原有商店已废弃，sudo apt install deepin-app-store 安装深度商店（已废弃的商店不用卸载） 将 /etc/apt/sources.list 中deb [by-hash=force trusted=yes ] http://192.168.225.247:8899 eagle main contrib non-free注释掉即可正常更新 需要使用系统设置来更新，UOS大版本更新使用apt会出现依赖错误； QQ 推荐 QQ纯净版；微信推荐UOS版（在商店中选择微信后再在右上角选择UOS）；这两个是linux原生，虽然简陋些但最稳定 搜狗输入法自带的是专业版，有效期90天，可以去搜狗输入法官网下载个人版 1. jdk 与 maven Link to heading java -version 发现系统无 java 开发环境，需要自行配置，以 微软 openjdk 为例:
下载相关文件: https://docs.microsoft.com/zh-cn/java/openjdk/download 解压 sudo tar -zxvf microsoft-jdk-17.0.4-linux-x64.tar.gz -C /usr/local/java/ 编辑 ~/.bashrc export JAVA_HOME=/usr/local/java/jdk-17.0.4+8 export JRE_HOME=${JAVA_HOME} export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH 使之生效 source ~/.bashrc 检查 java -version 安装 maven 类似</description>
    </item>
    
    <item>
      <title>iU&#43;N卡笔记本安装国产UOS/deepin操作系统以及torch&#43;cuda配置</title>
      <link>https://ssdreamc.github.io/posts/uso/</link>
      <pubDate>Fri, 18 Mar 2022 02:20:12 +0800</pubDate>
      
      <guid>https://ssdreamc.github.io/posts/uso/</guid>
      <description>与正常安装Windows操作系统区别不大，可以一直点“下一步”直到安装结束。
需要注意的地方可能有三点
一 容量空间变小： Link to heading 以128G硬盘为例，按照默认的安装方法，会分出 /(roota) 以及 rootb 两个大小为15G的根分区以及一个12G的/recovery分区，其中roota是日常使用分区，更新系统时，自动把roota复制一份到rootb上，作为备份，这样如果更新以后启动不了就能回退了，而/recovery+rootb就占用了27G空间，而这27G空间一般情况下是白白浪费的。
所以安装系统时选择推荐手动安装分区，不分配b分区以及recovery分区：
二 无法使用Nvidia独立显卡： Link to heading 这个情况是具有nVidia独立显卡的电脑外接显示器时发现的，UOS/deepin系统对硬件的兼容性还不太完善，如果显示接口（例如HDMI）在独立显卡上，可能由于无法使用独立显卡而导致无法输出显示。
方案一，使用应用商店中提供的切换工具显卡驱动管理器进行切换。 方案二，如果管理器无效，可以尝试该方案： 安装nvidia驱动
有坑，配置不好会直接导致 torch与CUDA不兼容 如果不要CUDA，可以直接安装 为了保险也可以按照安装CUDA的步骤来，在5. 安装cuda时再改为直接安装显卡驱动
# 安装英伟达显卡驱动和管理工具 sudo apt install nvidia-driver nvidia-smi nvidia-settings 安装一个显卡切换插件 安装插件后，注销重新登录或者直接重启都行，会在底部电源那一栏出现 Intel 的标志，点击它就可以切换了
三 无法正常在torch中使用CUDA： Link to heading 该解决方案略复杂一点点，因为现在Windows下的torch+cuda配置要比Linux下更为方便了，再就是UOS/deepin系统默认的包少一些，需要解决依赖：
直接安装CUDA，CUDA中带有显卡驱动；
pip 和 venv用 apt install python3-pip python3-venv 否则缺失依赖项
cudnn自带的sample也有依赖项缺失：sudo apt-get install libfreeimage3 libfreeimage-dev
torch的依赖项：sudo apt install libjpeg-dev zlib1g-dev
1、 禁用 nouveau 驱动 Link to heading # 我实际上使用的是nano，不过uos自带的deepin-editor也可以，任意编辑器都可以 sudo deepin-editor /etc/default/grub 在GURB_CMDLINE_LINUX_DEFAULT=&amp;quot;splash quiet后加上一句改为</description>
    </item>
    
    <item>
      <title>第零篇</title>
      <link>https://ssdreamc.github.io/posts/readme/</link>
      <pubDate>Mon, 31 Jan 2022 16:00:00 +0800</pubDate>
      
      <guid>https://ssdreamc.github.io/posts/readme/</guid>
      <description>ssdreamc.github.io Link to heading I just want a page site for myself, thanks github.
but the net is not health enough, sad…</description>
    </item>
    
    <item>
      <title>tech notes</title>
      <link>https://ssdreamc.github.io/posts/tech/</link>
      <pubDate>Mon, 13 Sep 2021 03:19:12 +0800</pubDate>
      
      <guid>https://ssdreamc.github.io/posts/tech/</guid>
      <description>about some tech marked Link to heading 1. spring boot Link to heading 1.1. PostMapping 属性 Link to heading name value 请求路由地址 path 指定路由地址 params 指定request中必须包含某些参数值 headers 指定request中必须包含某些指定的header值 consumes 请求提交内容类型，MediaType方式，如 application/json、application/x-www-urlencode、multipart/form-data等 produces 请求返回的数据类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回，如application/json demo:
@PostMapping(value = &amp;#34;/admin&amp;#34;, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity&amp;lt;Object&amp;gt; postPCWithJson(@RequestBody Object body,HttpServletRequest request, HttpServletResponse response, HttpMethod httpMethod) throws URISyntaxException { // TODO return new ResponseEntity(&amp;#34;&amp;#34;, HttpStatus.OK); } demoNieyan:
@ApiOperation(value = &amp;#34;获取文章记录&amp;#34;, httpMethod = &amp;#34;POST&amp;#34;) @PreAuth(&amp;#34;permitAll()&amp;#34;) @PostMapping(value = &amp;#34;/query&amp;#34;, produces = &amp;#34;application/json;charset=UTF-8&amp;#34;) public R&amp;lt;PageInfoView&amp;lt;InnerHits&amp;lt;ArticleListVO&amp;gt;&amp;gt;&amp;gt; queryNews(@RequestBody QueryArticleParam queryArticleParam, Query query) { PageInfoView&amp;lt;InnerHits&amp;lt;ArticleListVO&amp;gt;&amp;gt; pageInfoView = openNewsService.</description>
    </item>
    
    <item>
      <title>雨后</title>
      <link>https://ssdreamc.github.io/posts/old/%E9%9B%A8%E5%90%8E/</link>
      <pubDate>Tue, 10 Oct 2017 10:26:12 +0800</pubDate>
      
      <guid>https://ssdreamc.github.io/posts/old/%E9%9B%A8%E5%90%8E/</guid>
      <description>秋声送雨追寒露
星落处
飘零木
残风半卷天涯路
明月春花曾几度
念蒹葭
唱白鹭
陈词无人对影诉</description>
    </item>
    
  </channel>
</rss>
